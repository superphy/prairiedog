# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
    build:
        docker:
            # specify the version you desire here
            # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
            - image: superphy/tox-base:latest

            # Specify service dependencies here if necessary
            # CircleCI maintains a library of pre-built images
            # documented at https://circleci.com/docs/2.0/circleci-images/
            # - image: circleci/postgres:9.4

        working_directory: ~/repo

        steps:
            - checkout

            - run:
                name: pull submodules
                command: |
                    git submodule init
                    git submodule update --remote

            - setup_remote_docker

            - run:
                name: Install Docker client
                command: |
                    set -x
                    VER="18.06.0-ce"
                    curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
                    tar -xz -C /tmp -f /tmp/docker-$VER.tgz
                    mv /tmp/docker/* /usr/bin

            - run:
                name: Install Docker Compose
                command: |
                    curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
                    chmod +x ~/docker-compose
                    mv ~/docker-compose /usr/local/bin/docker-compose

            # Download and cache dependencies
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}
                      # fallback to using the latest cache if no exact match is found
                      - v1-dependencies-

            - run:
                  name: install dependencies
                  command: |
                      python3 -m venv venv
                      . venv/bin/activate
                      pip install -r requirements.txt
                      pip install -r requirements_dev.txt

            - run:
                  name: install lemongraph
                  command: |
                      . venv/bin/activate
                      apt-get update -y && apt-get install -y libffi-dev zlib1g-dev python-dev python-cffi
                      cd lemongraph && python setup.py install


            - save_cache:
                  paths:
                      - ./venv
                  key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}

            # run tests!
            # this example uses Django's built-in test-runner
            # other common Python testing frameworks include pytest and nose
            # https://pytest.org
            # https://nose.readthedocs.io
            - run:
                  name: run tests
                  command: |
                      . venv/bin/activate
                      pip install tox
                      tox -v
            - run:
                  name: codecov
                  command: |
                      . venv/bin/activate
                      codecov
